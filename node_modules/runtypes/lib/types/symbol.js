"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Symbol = void 0;
var runtype_1 = require("../runtype");
var f = function (key) {
    return runtype_1.create(function (value) {
        if (typeof value !== 'symbol') {
            return {
                success: false,
                message: "Expected symbol, but was " + typeStringOf(value),
            };
        }
        else {
            var keyForValue = global.Symbol.keyFor(value);
            if (keyForValue !== key) {
                return {
                    success: false,
                    message: "Expected symbol key to be " + quoteIfPresent(key) + ", but was " + quoteIfPresent(keyForValue),
                };
            }
            else {
                return { success: true, value: value };
            }
        }
    }, { tag: 'symbol', key: key });
};
/**
 * Validates that a value is a symbol, regardless of whether it is keyed or not.
 */
exports.Symbol = runtype_1.create(function (value) {
    if (typeof value !== 'symbol') {
        return {
            success: false,
            message: "Expected symbol, but was " + typeStringOf(value),
        };
    }
    else {
        return { success: true, value: value };
    }
}, Object.assign(f, { tag: 'symbol' }));
var quoteIfPresent = function (key) { return (key === undefined ? 'undefined' : "\"" + key + "\""); };
var typeStringOf = function (value) {
    return value === null ? 'null' : Array.isArray(value) ? 'array' : typeof value;
};
