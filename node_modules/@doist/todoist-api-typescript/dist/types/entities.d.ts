import { Boolean, Number as NumberRunType, String, Array, Record, Static, Partial, Literal } from 'runtypes';
export declare const Int: import("runtypes").Constraint<NumberRunType, number, unknown>;
export declare type TodoistEntity = {
    id: number;
};
export declare type OrderedEntity = TodoistEntity & {
    order: number;
};
export declare type EntityInHierarchy = OrderedEntity & {
    parentId?: number;
};
export declare const DueDate: import("runtypes").Intersect2<Record<{
    recurring: Boolean;
    string: String;
    date: String;
}, false>, Partial<{
    datetime: String;
    timezone: String;
}, false>>;
export declare type DueDate = Static<typeof DueDate>;
export declare const Task: import("runtypes").Intersect2<Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    content: String;
    description: String;
    projectId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    sectionId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    completed: Boolean;
    labelIds: Array<import("runtypes").Constraint<NumberRunType, number, unknown>, false>;
    priority: import("runtypes").Constraint<NumberRunType, number, unknown>;
    commentCount: import("runtypes").Constraint<NumberRunType, number, unknown>;
    created: String;
    url: String;
}, false>, Partial<{
    parentId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    due: import("runtypes").Intersect2<Record<{
        recurring: Boolean;
        string: String;
        date: String;
    }, false>, Partial<{
        datetime: String;
        timezone: String;
    }, false>>;
    assignee: import("runtypes").Constraint<NumberRunType, number, unknown>;
}, false>>;
export declare type Task = Static<typeof Task>;
export declare const Project: import("runtypes").Intersect2<Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    color: import("runtypes").Constraint<NumberRunType, number, unknown>;
    commentCount: import("runtypes").Constraint<NumberRunType, number, unknown>;
    shared: Boolean;
    favorite: Boolean;
    url: String;
}, false>, Partial<{
    parentId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    inboxProject: Boolean;
    teamInbox: Boolean;
    syncId: import("runtypes").Constraint<NumberRunType, number, unknown>;
}, false>>;
export declare type Project = Static<typeof Project>;
export declare const Section: Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    projectId: import("runtypes").Constraint<NumberRunType, number, unknown>;
}, false>;
export declare type Section = Static<typeof Section>;
export declare const Label: Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    order: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    color: import("runtypes").Constraint<NumberRunType, number, unknown>;
    favorite: Boolean;
}, false>;
export declare type Label = Static<typeof Label>;
export declare const Attachment: import("runtypes").Intersect2<Record<{
    resourceType: String;
}, false>, Partial<{
    fileName: String;
    fileSize: import("runtypes").Constraint<NumberRunType, number, unknown>;
    fileType: String;
    fileUrl: String;
    fileDuration: import("runtypes").Constraint<NumberRunType, number, unknown>;
    uploadState: import("runtypes").Union2<Literal<"pending">, Literal<"completed">>;
    image: String;
    imageWidth: import("runtypes").Constraint<NumberRunType, number, unknown>;
    imageHeight: import("runtypes").Constraint<NumberRunType, number, unknown>;
    url: String;
    title: String;
}, false>>;
export declare type Attachment = Static<typeof Attachment>;
export declare const Comment: import("runtypes").Intersect2<Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    content: String;
    posted: String;
}, false>, Partial<{
    taskId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    projectId: import("runtypes").Constraint<NumberRunType, number, unknown>;
    attachment: import("runtypes").Intersect2<Record<{
        resourceType: String;
    }, false>, Partial<{
        fileName: String;
        fileSize: import("runtypes").Constraint<NumberRunType, number, unknown>;
        fileType: String;
        fileUrl: String;
        fileDuration: import("runtypes").Constraint<NumberRunType, number, unknown>;
        uploadState: import("runtypes").Union2<Literal<"pending">, Literal<"completed">>;
        image: String;
        imageWidth: import("runtypes").Constraint<NumberRunType, number, unknown>;
        imageHeight: import("runtypes").Constraint<NumberRunType, number, unknown>;
        url: String;
        title: String;
    }, false>>;
}, false>>;
export declare type Comment = Static<typeof Comment>;
export declare const User: Record<{
    id: import("runtypes").Constraint<NumberRunType, number, unknown>;
    name: String;
    email: String;
}, false>;
export declare type User = Static<typeof User>;
export declare type Color = TodoistEntity & {
    name: string;
    value: string;
};
export declare type QuickAddTaskResponse = {
    id: number;
    projectId: number;
    content: string;
    description: string;
    priority: number;
    sectionId: number | null;
    parentId: number | null;
    childOrder: number;
    labels: number[];
    responsibleUid: number | null;
    checked: number;
    dateAdded: string;
    syncId: number | null;
    due: {
        date: string;
        timezone: string | null;
        isRecurring: boolean;
        string: string;
        lang: string;
    } | null;
};
